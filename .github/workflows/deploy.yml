name: Deploy Spring Boot App

on:
  push:
    branches: [ main ]  # main 브랜치에 push될 때만 작동

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle and pass secrets to JVM
        run: |
          ./gradlew clean build -x test \
            -Dspring.datasource.url="${{ secrets.SPRING_DATASOURCE_URL }}" \
            -Dspring.datasource.username="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
            -Dspring.datasource.password="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
            -Djwt.secret="${{ secrets.JWT_SECRET_KEY }}" \
            -Dopenai.api.key="${{ secrets.OPENAI_API_KEY }}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app

      - name: Deploy to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "*.jar"
          target: "/home/ubuntu/app/"

      - name: Restart Spring Boot App (via SSH)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            pkill -f 'java -jar' || true
            nohup java -jar /home/ubuntu/app/*.jar > /home/ubuntu/app/nohup.out 2>&1 &
